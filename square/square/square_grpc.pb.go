// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: square/square.proto

package square

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquareRpcClient is the client API for SquareRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquareRpcClient interface {
	FindSquareUnary(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	FindSquareStream(ctx context.Context, opts ...grpc.CallOption) (SquareRpc_FindSquareStreamClient, error)
}

type squareRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewSquareRpcClient(cc grpc.ClientConnInterface) SquareRpcClient {
	return &squareRpcClient{cc}
}

func (c *squareRpcClient) FindSquareUnary(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/SquareRpc/findSquareUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squareRpcClient) FindSquareStream(ctx context.Context, opts ...grpc.CallOption) (SquareRpc_FindSquareStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SquareRpc_ServiceDesc.Streams[0], "/SquareRpc/findSquareStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &squareRpcFindSquareStreamClient{stream}
	return x, nil
}

type SquareRpc_FindSquareStreamClient interface {
	Send(*Input) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type squareRpcFindSquareStreamClient struct {
	grpc.ClientStream
}

func (x *squareRpcFindSquareStreamClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *squareRpcFindSquareStreamClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SquareRpcServer is the server API for SquareRpc service.
// All implementations must embed UnimplementedSquareRpcServer
// for forward compatibility
type SquareRpcServer interface {
	FindSquareUnary(context.Context, *Input) (*Output, error)
	FindSquareStream(SquareRpc_FindSquareStreamServer) error
	mustEmbedUnimplementedSquareRpcServer()
}

// UnimplementedSquareRpcServer must be embedded to have forward compatible implementations.
type UnimplementedSquareRpcServer struct {
}

func (UnimplementedSquareRpcServer) FindSquareUnary(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSquareUnary not implemented")
}
func (UnimplementedSquareRpcServer) FindSquareStream(SquareRpc_FindSquareStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FindSquareStream not implemented")
}
func (UnimplementedSquareRpcServer) mustEmbedUnimplementedSquareRpcServer() {}

// UnsafeSquareRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquareRpcServer will
// result in compilation errors.
type UnsafeSquareRpcServer interface {
	mustEmbedUnimplementedSquareRpcServer()
}

func RegisterSquareRpcServer(s grpc.ServiceRegistrar, srv SquareRpcServer) {
	s.RegisterService(&SquareRpc_ServiceDesc, srv)
}

func _SquareRpc_FindSquareUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareRpcServer).FindSquareUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquareRpc/findSquareUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareRpcServer).FindSquareUnary(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquareRpc_FindSquareStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SquareRpcServer).FindSquareStream(&squareRpcFindSquareStreamServer{stream})
}

type SquareRpc_FindSquareStreamServer interface {
	Send(*Output) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type squareRpcFindSquareStreamServer struct {
	grpc.ServerStream
}

func (x *squareRpcFindSquareStreamServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *squareRpcFindSquareStreamServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SquareRpc_ServiceDesc is the grpc.ServiceDesc for SquareRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquareRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SquareRpc",
	HandlerType: (*SquareRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findSquareUnary",
			Handler:    _SquareRpc_FindSquareUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "findSquareStream",
			Handler:       _SquareRpc_FindSquareStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "square/square.proto",
}
